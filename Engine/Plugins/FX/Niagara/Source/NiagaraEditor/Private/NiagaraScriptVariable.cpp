// Copyright Epic Games, Inc. All Rights Reserved.

#include "NiagaraScriptVariable.h"

#include "EdGraphSchema_Niagara.h"
#include "INiagaraEditorTypeUtilities.h"
#include "NiagaraCommon.h"
#include "NiagaraCustomVersion.h"
#include "NiagaraEditorModule.h"
#include "NiagaraEditorUtilities.h"
#include "NiagaraParameterDefinitions.h"

UNiagaraScriptVariable::UNiagaraScriptVariable(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, DefaultMode(ENiagaraDefaultMode::Value)
	, DefaultValueVariant()
	, StaticSwitchDefaultValue(0)
	, bIsStaticSwitch(false)
	, bSubscribedToParameterDefinitions(false)
	, ChangeId(FGuid())
	, bOverrideParameterDefinitionsDefaultValue(false)
{
}

void UNiagaraScriptVariable::PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)
{
	Super::PostEditChangeProperty(PropertyChangedEvent);

#if WITH_EDITOR
	UpdateChangeId();

	if (UNiagaraGraph* Graph = Cast<UNiagaraGraph>(GetOuter()))
	{
		Graph->NotifyGraphNeedsRecompile();
	}
	else if (UNiagaraParameterDefinitions* Definitions = Cast<UNiagaraParameterDefinitions>(GetOuter()))
	{
		Definitions->NotifyParameterDefinitionsChanged();
	}
#endif	//#if WITH_EDITOR
}

void UNiagaraScriptVariable::Init(const FNiagaraVariable& InVar, const FNiagaraVariableMetaData& InVarMetaData)
{
	Variable = InVar;
	Metadata = InVarMetaData;
	AllocateData();

	if (!Metadata.GetVariableGuid().IsValid())
	{
		Metadata.CreateNewGuid();
	}
	if (ChangeId.IsValid() == false)
	{
		UpdateChangeId();
	}
}

void UNiagaraScriptVariable::PostLoad()
{
	Super::PostLoad();

	if (GIsEditor)
	{
		SetFlags(RF_Transactional);
	}

	if (!Metadata.GetVariableGuid().IsValid())
	{
		Metadata.CreateNewGuid();
	}
	if (ChangeId.IsValid() == false)
	{
		UpdateChangeId();
	}

	// Fix up autogenerated default values if necessary.
	const int32 NiagaraCustomVersion = GetLinkerCustomVersion(FNiagaraCustomVersion::GUID);
	if (NiagaraCustomVersion < FNiagaraCustomVersion::MoveDefaultValueFromFNiagaraVariableMetaDataToUNiagaraScriptVariable)
	{
		AllocateData();
		if (Metadata.GetIsStaticSwitch_DEPRECATED())
		{
			SetIsStaticSwitch(true);
			SetStaticSwitchDefaultValue(Metadata.GetStaticSwitchDefaultValue_DEPRECATED());
		}
	}
}

bool UNiagaraScriptVariable::AppendCompileHash(FNiagaraCompileHashVisitor* InVisitor) const
{
	if (!FNiagaraEditorUtilities::NestedPropertiesAppendCompileHash(static_cast<const void*>(this), StaticClass(), EFieldIteratorFlags::ExcludeSuper, StaticClass()->GetName(), InVisitor))
	{
		return false;
	}
	return true;
}

void UNiagaraScriptVariable::SetIsSubscribedToParameterDefinitions(bool bInSubscribedToParameterDefinitions)
{
	// Lazy init the ChangeId so that we are not generating a new GUID for every UNiagaraScriptVariable.
	if (bInSubscribedToParameterDefinitions && (ChangeId.IsValid() == false))
	{
		UpdateChangeId();
	}
	bSubscribedToParameterDefinitions = bInSubscribedToParameterDefinitions;
}

void UNiagaraScriptVariable::SetIsOverridingParameterDefinitionsDefaultValue(bool bInOverridingParameterDefinitionsDefaultValue)
{
	ensureMsgf(GetIsSubscribedToParameterDefinitions(), TEXT("Set overriding parameter definitions default value but script var is not synchronizing with a parameter definitions!"));
	bOverrideParameterDefinitionsDefaultValue = bInOverridingParameterDefinitionsDefaultValue;
}

bool UNiagaraScriptVariable::DefaultsAreEquivalent(const UNiagaraScriptVariable* ScriptVarA, const UNiagaraScriptVariable* ScriptVarB)
{
	if (ScriptVarA->DefaultMode != ScriptVarB->DefaultMode)
	{
		return false;
	}

	switch (ScriptVarA->DefaultMode) {
	case ENiagaraDefaultMode::Binding:
		return ScriptVarA->DefaultBinding.GetName() == ScriptVarB->DefaultBinding.GetName();
		break;
	case ENiagaraDefaultMode::Custom:
		return false;
		break;
	case ENiagaraDefaultMode::FailIfPreviouslyNotSet:
		return true;
		break;
	case ENiagaraDefaultMode::Value:
		ensureMsgf(
			ScriptVarA->GetDefaultValueVariant().GetMode() != ENiagaraVariantMode::None && ScriptVarB->GetDefaultValueVariant().GetMode() != ENiagaraVariantMode::None,
			TEXT("Encountered UNiagaraScriptVariable with invalid DefaultValueVariant mode! Was it not postloaded?"));
		return ScriptVarA->GetDefaultValueVariant() == ScriptVarB->GetDefaultValueVariant();
		break;
	};

	ensureMsgf(false, TEXT("Encountered unknown ENiagaraDefaultMode when comparing UNiagaraScriptVariable defaults!"));
	return false;
}
