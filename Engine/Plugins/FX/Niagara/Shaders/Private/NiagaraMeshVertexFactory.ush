// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	MeshParticleVertexFactory.usf: Mesh particle vertex factory shader code.
=============================================================================*/

#include "/Engine/Private/VertexFactoryCommon.ush"
#include "NiagaraCommon.ush"
#include "NiagaraVFParticleAccess.usf"

#if COMPUTESHADER || RAYHITGROUPSHADER
#include "/Engine/Private/RayTracing/RayTracingCommon.ush"
#include "/Engine/Private/RayTracing/RayTracingHitGroupCommon.ush"
#endif

#define USE_PARTICLE_POSITION (NEEDS_PARTICLE_POSITION)
#define USE_PARTICLE_VELOCITY (NEEDS_PARTICLE_VELOCITY)
#define USE_PARTICLE_TIME (NEEDS_PARTICLE_TIME)
#define USE_PARTICLE_RANDOM (NEEDS_PARTICLE_RANDOM)
#define USE_PARTICLE_TRANSFORM (NEEDS_PARTICLE_TRANSFORM)
#define USE_PARTICLE_LOCAL_TO_WORLD (NEEDS_PARTICLE_LOCAL_TO_WORLD)
#define USE_PARTICLE_WORLD_TO_LOCAL (NEEDS_PARTICLE_WORLD_TO_LOCAL)

#ifndef ENABLE_PRECISE_MOTION_VECTORS
#define ENABLE_PRECISE_MOTION_VECTORS 0
#endif

float3 LocalToWorldPos(float3 LocalSpacePos, float4x4 LocalToWorld)
{
	return
		LocalToWorld[0].xyz * LocalSpacePos.x +
		LocalToWorld[1].xyz * LocalSpacePos.y +
		LocalToWorld[2].xyz * LocalSpacePos.z +
		LocalToWorld[3].xyz;
}

float3 SimToWorldPos(float3 SimSpacePos, float4x4 LocalToWorld)
{
	if (NiagaraMeshVF.bLocalSpace)
	{
		return LocalToWorldPos(SimSpacePos, LocalToWorld);
	}
	
	return SimSpacePos;
}

float3 LocalToWorldVec(float3 LocalSpaceVec, float4x4 LocalToWorld)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	return
		InvScale.x * LocalToWorld[0].xyz * LocalSpaceVec.xxx +
		InvScale.y * LocalToWorld[1].xyz * LocalSpaceVec.yyy +
		InvScale.z * LocalToWorld[2].xyz * LocalSpaceVec.zzz;
}

float3 WorldToLocalVec(float3 WorldSpaceVec, float4x4 LocalToWorld)
{
	const float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	float3x3 InvRot =
	{
		InvScale.x * LocalToWorld[0].xyz,
		InvScale.y * LocalToWorld[1].xyz,
		InvScale.z * LocalToWorld[2].xyz
	};
	InvRot = transpose(InvRot);
	return mul(WorldSpaceVec, InvRot);
}

float3 SimToWorldVec(float3 SimSpaceVec, float4x4 LocalToWorld)
{
	if (NiagaraMeshVF.bLocalSpace)
	{
		return LocalToWorldVec(SimSpaceVec, LocalToWorld);
	}
	
	return SimSpaceVec;
}

float3 WorldToSimVec(float3 InVector, float4x4 LocalToWorld)
{
	if (NiagaraMeshVF.bLocalSpace)
	{
		return WorldToLocalVec(InVector, LocalToWorld);
	}
	
	return InVector;
}

#define MESH_FACING_DEFAULT 0
#define MESH_FACING_VELOCITY 1
#define MESH_FACING_CAMERA_POSITION 2
#define MESH_FACING_CAMERA_PLANE 3

#define SPACE_SIMULATION 0
#define SPACE_WORLD 1
#define SPACE_LOCAL 2

struct FVertexFactoryInput
{
	float4	Position	: ATTRIBUTE0;
	half3	TangentX	: ATTRIBUTE1;
	// TangentZ.w contains sign of tangent basis determinant
	half4	TangentZ	: ATTRIBUTE2;
	half4	VertexColor : ATTRIBUTE3;

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	float2	TexCoords[NUM_MATERIAL_TEXCOORDS_VERTEX] : ATTRIBUTE4;
#elif USE_PARTICLE_SUBUVS
	float2	TexCoords[1] : ATTRIBUTE4;
#endif

	uint InstanceId	: SV_InstanceID;
#if PASS_NEEDS_VERTEX_ID
	uint VertexId : SV_VertexID;
#endif // #if PASS_NEEDS_VERTEX_ID
};

struct FVertexFactoryInterpolantsVSToPS
{
	TANGENTTOWORLD_INTERPOLATOR_BLOCK

#if USE_PARTICLE_SUBUVS
	float4 SubUV0AndTexCoord0 : TEXCOORD1;
	float4 SubUV1AndLerp : TEXCOORD2;
#else
	#if  NUM_TEX_COORD_INTERPOLATORS
		float4	TexCoords[( NUM_TEX_COORD_INTERPOLATORS+1)/2]	: TEXCOORD0;
	#endif
#endif

#if INTERPOLATE_VERTEX_COLOR
	float4	VertexColor : COLOR0;
#endif

#if NEEDS_PARTICLE_COLOR
	nointerpolation float4	ParticleColor : COLOR1;
#endif

#if (DYNAMIC_PARAMETERS_MASK & 1)
	nointerpolation float4 DynamicParameter : COLOR2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	nointerpolation float4 DynamicParameter1 : COLOR3;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	nointerpolation float4 DynamicParameter2 : COLOR4;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	nointerpolation float4 DynamicParameter3 : COLOR5;
#endif

#if USE_PARTICLE_POSITION
	/** Particle position in camera-centered translated world space */
	nointerpolation float3 ParticleTranslatedWorldPosition	: PARTICLE_POSITION;
#endif

#if USE_PARTICLE_VELOCITY
	/** The velocity of the particle, XYZ: direction, W: speed. */
	nointerpolation float4 ParticleVelocity	: PARTICLE_VELOCITY;
#endif

#if USE_PARTICLE_TIME
	/** Relative alive time of the particle */
	nointerpolation float RelativeTime : PARTICLE_TIME;
#endif

#if USE_PARTICLE_RANDOM
	nointerpolation float ParticleRandom : PARTICLE_RANDOM;
#endif

#if USE_PARTICLE_LOCAL_TO_WORLD
	nointerpolation float4 ParticleToWorld[3] : PARTICLE_LOCAL_TO_WORLD;
#endif

#if USE_PARTICLE_WORLD_TO_LOCAL
	nointerpolation float4 WorldToParticle[3] : PARTICLE_WORLD_TO_LOCAL;
#endif

#if INSTANCED_STEREO
	nointerpolation uint EyeIndex : PACKED_EYE_INDEX;
#endif
};

struct FVertexFactoryIntermediates
{
	/** The color of the vertex. */
	float4 VertexColor;

	/** The color of the particle. */
	float4 ParticleColor;

	/** The texture coordinates for the vertex. */
#if NUM_MATERIAL_TEXCOORDS_VERTEX
	float2	TexCoords[NUM_MATERIAL_TEXCOORDS_VERTEX];
#endif
#if USE_PARTICLE_SUBUVS
	float4 SubUVCoords;
	nointerpolation float SubUVLerp;
#endif

	/** Optional dynamic parameters for the particle. */
#if (DYNAMIC_PARAMETERS_MASK & 1)
	float4 DynamicParameter;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	float4 DynamicParameter1;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	float4 DynamicParameter2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	float4 DynamicParameter3;
#endif

	/** The position of the particle, XYZ: direction. */
	float3 ParticlePosition;

	/** The velocity of the particle, XYZ: direction, W: speed. */
	float4 ParticleVelocity;

	/** Particle position in camera-centered translated world space. */
	float3 ParticleTranslatedWorldPosition;

#if NEEDS_PARTICLE_TIME
	/** Relative time. */
	float RelativeTime;
#endif

#if NEEDS_PARTICLE_RANDOM
	/** Particle Random value */
	float ParticleRandom;
#endif

	float4x4 ParticleToWorld;
	float4x4 ParticleToWorldNoScale;
	float4x4 PrevParticleToWorld;

	float4x4 WorldToParticle;

	/** The instance ID when unsorted/culled, otherwise is an index buffer indirection */
	uint SortedInstanceId;
};

float4x4 GetParticleTransform(FVertexFactoryIntermediates Inters)
{
	return Inters.ParticleToWorld;
}

float4x4 GetParticleTransformNoScale(FVertexFactoryIntermediates Inters)
{
	return Inters.ParticleToWorldNoScale;
}

float4x4 GetParticleInvTransform(FVertexFactoryIntermediates Inters)
{
	return Inters.WorldToParticle;
}

float4x4 GetParticlePrevTransform(FVertexFactoryIntermediates Inters)
{
	return Inters.PrevParticleToWorld;
}

/** Converts from vertex factory specific interpolants to a FMaterialPixelParameters, which is used by material inputs. */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

#if USE_PARTICLE_SUBUVS
	#if  NUM_TEX_COORD_INTERPOLATORS
		UNROLL
		for( int CoordinateIndex = 0; CoordinateIndex <  NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++ )
		{
			Result.TexCoords[CoordinateIndex] = Interpolants.SubUV0AndTexCoord0.zw;
		}
	#endif
	Result.Particle.SubUVCoords[0] = Interpolants.SubUV0AndTexCoord0.xy;
	Result.Particle.SubUVCoords[1] = Interpolants.SubUV1AndLerp.xy;
	Result.Particle.SubUVLerp = Interpolants.SubUV1AndLerp.z;
#elif  NUM_TEX_COORD_INTERPOLATORS
	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex * 2 + 1 < NUM_TEX_COORD_INTERPOLATORS; ++CoordinateIndex)
	{
		Result.TexCoords[CoordinateIndex * 2] = Interpolants.TexCoords[CoordinateIndex].xy;
		Result.TexCoords[CoordinateIndex * 2 + 1] = Interpolants.TexCoords[CoordinateIndex].wz;
	}
	#if NUM_TEX_COORD_INTERPOLATORS & 1
		Result.TexCoords[NUM_TEX_COORD_INTERPOLATORS - 1] = Interpolants.TexCoords[NUM_TEX_COORD_INTERPOLATORS / 2].xy;
	#endif // #if NUM_TEX_COORD_INTERPOLATORS & 1
#endif

	half3 TangentToWorld0 = Interpolants.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.TangentToWorld2;
	Result.UnMirrored = TangentToWorld2.w;

#if INTERPOLATE_VERTEX_COLOR
	Result.VertexColor = Interpolants.VertexColor;
#else
	Result.VertexColor = 0;
#endif

#if NEEDS_PARTICLE_COLOR
	Result.Particle.Color = Interpolants.ParticleColor;
#endif

#if (DYNAMIC_PARAMETERS_MASK != 0)
	Result.Particle.DynamicParameterValidMask = NiagaraMeshVF.MaterialParamValidMask;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 1)
	Result.Particle.DynamicParameter = Interpolants.DynamicParameter;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	Result.Particle.DynamicParameter1 = Interpolants.DynamicParameter1;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	Result.Particle.DynamicParameter2 = Interpolants.DynamicParameter2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	Result.Particle.DynamicParameter3 = Interpolants.DynamicParameter3;
#endif

#if USE_PARTICLE_POSITION
	Result.Particle.TranslatedWorldPositionAndSize.xyz = Interpolants.ParticleTranslatedWorldPosition.xyz;
	Result.Particle.TranslatedWorldPositionAndSize.w = 1;
#endif

#if USE_PARTICLE_VELOCITY
	Result.Particle.Velocity = Interpolants.ParticleVelocity;
#endif

#if USE_PARTICLE_TIME
	Result.Particle.RelativeTime = Interpolants.RelativeTime;
#endif

#if USE_PARTICLE_RANDOM
	Result.Particle.Random = Interpolants.ParticleRandom;
#else
	Result.Particle.Random = 0.0f;
#endif

#if USE_PARTICLE_LOCAL_TO_WORLD
	Result.Particle.ParticleToWorld = transpose(float4x4(
		Interpolants.ParticleToWorld[0],
		Interpolants.ParticleToWorld[1],
		Interpolants.ParticleToWorld[2],
		float4(0.0f, 0.0f, 0.0f, 1.0f)));
#endif

#if USE_PARTICLE_WORLD_TO_LOCAL
	Result.Particle.WorldToParticle = transpose(float4x4(
		Interpolants.WorldToParticle[0],
		Interpolants.WorldToParticle[1],
		Interpolants.WorldToParticle[2],
		float4(0.0f, 0.0f, 0.0f, 1.0f)));
#endif

	Result.Particle.MotionBlurFade = 1.0f;
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
	Result.TwoSidedSign = 1;

#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
	Result.WorldVertexNormal_Center = Interpolants.TangentToWorld2_Center.xyz;
#endif

	return Result;
}

/** Converts from vertex factory specific input to a FMaterialVertexParameters, which is used by vertex shader material inputs. */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.VertexColor;
	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentBias(Input.TangentZ.xyz);

#if NEEDS_PARTICLE_POSITION
	Result.Particle.TranslatedWorldPositionAndSize.xyz = Intermediates.ParticleTranslatedWorldPosition.xyz;
	Result.Particle.TranslatedWorldPositionAndSize.w = 1;
#endif

#if NEEDS_PARTICLE_VELOCITY
	Result.Particle.Velocity = Intermediates.ParticleVelocity;
#endif

#if NEEDS_PARTICLE_TIME
	Result.Particle.RelativeTime = Intermediates.RelativeTime;
#endif

#if NEEDS_PARTICLE_RANDOM
	Result.Particle.Random = Intermediates.ParticleRandom;
#else
	Result.Particle.Random = 0.0f;
#endif

	Result.Particle.Color = Intermediates.ParticleColor;

#if (DYNAMIC_PARAMETERS_MASK != 0)
	Result.Particle.DynamicParameterValidMask = NiagaraMeshVF.MaterialParamValidMask;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 1)
	Result.Particle.DynamicParameter = Intermediates.DynamicParameter;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	Result.Particle.DynamicParameter1 = Intermediates.DynamicParameter1;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	Result.Particle.DynamicParameter2 = Intermediates.DynamicParameter2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	Result.Particle.DynamicParameter3 = Intermediates.DynamicParameter3;
#endif

	float4x4 Transform = GetParticleTransform(Intermediates);
	Result.InstanceLocalToWorld = Transform;

	Result.Particle.ParticleToWorld = Transform;
	Result.Particle.WorldToParticle = GetParticleInvTransform(Intermediates);

	// Use the particle's unscaled transform for rotating normals to match static mesh
	Result.TangentToWorld = mul(TangentToLocal, (float3x3)GetParticleTransformNoScale(Intermediates));

	Result.PrevFrameLocalToWorld = GetParticlePrevTransform(Intermediates);

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	for(int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = Intermediates.TexCoords[CoordinateIndex];
	}
#endif

	return Result;
}

float4 CalcWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 Transform = GetParticleTransform(Intermediates);
	float3 WorldPosition = mul(Input.Position, Transform).xyz + ResolvedView.PreViewTranslation;
	return float4(WorldPosition, Input.Position.w);
}

float4 CalcPrevWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
    float4x4 Transform = GetParticlePrevTransform(Intermediates);
    float3 WorldPosition = mul(Input.Position, Transform).xyz + ResolvedView.PrevPreViewTranslation;
    return float4(WorldPosition, Input.Position.w);
}

float3x3 GetFacingMatrix(in float3 ParticlePosition, in float4 ParticleVelocity, in float4x4 LocalToWorld, in float3 WorldCamOrigin, in float3 CamViewForward, in float3 CamViewUp)
{
	float3 WorldX = float3(1, 0, 0);
	float3 WorldZ = float3(0, 0, 1);
	float3 FacingDir = float3(0, 0, 0);
	const bool bLocalSpace = NiagaraMeshVF.bLocalSpace;

	// Select facing direction
	switch (NiagaraMeshVF.FacingMode)
	{
		case MESH_FACING_VELOCITY:
		{
			if (ParticleVelocity.w > 0.0f)
			{
				FacingDir = ParticleVelocity.xyz;
			}
			else
			{
				FacingDir = WorldToSimVec(WorldZ, LocalToWorld);
			}
			break;
		}

		case MESH_FACING_CAMERA_POSITION:
		{
			float3 WorldPosition = SimToWorldPos(ParticlePosition, LocalToWorld);
			float3 CameraVector = WorldCamOrigin - WorldPosition;
			FacingDir = WorldToSimVec(normalize(CameraVector), LocalToWorld);
			break;
		}

		default:
		case MESH_FACING_CAMERA_PLANE:
		{
			FacingDir = WorldToSimVec(-CamViewForward, LocalToWorld);
			break;
		}
	}

	float3 XAxis = { 1, 0, 0 };
	float3 YAxis = { 0, 1, 0 };
	float3 ZAxis = { 0, 0, 1 };
	if (NiagaraMeshVF.bLockedAxisEnable)
	{
		// This is a special case where we want to lock the Z-Axis to the locked axis and get the X-Axis as close to facing direction as possible
		const bool bWorldSpaceAxis = (NiagaraMeshVF.LockedAxisSpace == SPACE_WORLD) || (NiagaraMeshVF.LockedAxisSpace == SPACE_SIMULATION && !bLocalSpace);
		float3 LockedAxis = NiagaraMeshVF.LockedAxis;
		if (bWorldSpaceAxis && bLocalSpace)
		{
			// Transform the world-space axis to local space
			LockedAxis = WorldToLocalVec(LockedAxis, LocalToWorld);
		}
		else if (!bWorldSpaceAxis && !bLocalSpace)
		{
			// Transform the local-space axis to world space
			LockedAxis = LocalToWorldVec(LockedAxis, LocalToWorld);
		}

		if (abs(dot(FacingDir, LockedAxis)) > 0.99f)
		{
			// The facing dir and locked axis are too similar, choose a reference direction for the facing dir
			FacingDir = abs(LockedAxis.z) > 0.99f ? float3(1, 0, 0) : float3(0, 0, 1);
		}

		ZAxis = LockedAxis;
		YAxis = normalize(cross(ZAxis, FacingDir));
		XAxis = cross(YAxis, ZAxis);
	}
	else
	{
		// Determine a reference vector to use for up
		float3 RefVector;
		if (NiagaraMeshVF.FacingMode == MESH_FACING_CAMERA_PLANE)
		{
			// Use the camera upwards direction as a reference vector
			//-TODO: Add ability to remove HMD roll in VR
			RefVector = CamViewUp;
		}
		else
		{
			// Prefer to use world up as a reference vector, fall back to world X-axis when facing up or down
			float DotWorldZ = dot(FacingDir, WorldZ);
			RefVector = abs(DotWorldZ) > 0.99f ? (-sign(DotWorldZ) * WorldX) : WorldZ;
		}

		// rotate the reference direction to simulation space, if necessary
		RefVector = WorldToSimVec(RefVector, LocalToWorld);

		// Orthonormalize the look-at rotation and generate a matrix
		XAxis = FacingDir;
		YAxis = normalize(cross(RefVector, FacingDir));
		ZAxis = cross(XAxis, YAxis);
	}

	return float3x3(XAxis, YAxis, ZAxis);
}

float4 GetVelocityDirMag(int VelocityDataOffset, float3 DefaultVelocity, uint InstanceId)
{
	float4 DirMag;
	DirMag.xyz = SafeGetVec3(VelocityDataOffset, InstanceId, DefaultVelocity);
	DirMag.w = length(DirMag.xyz);
	
	DirMag.xyz = DirMag.w > 0.0f ? DirMag.xyz / DirMag.w : float3(0.0f, 0.0f, 0.0f);
	
	return DirMag;
}

float3 CalculateCameraOffset(float3 ParticlePosition, float3 CamWorldPos, uint InstanceId, int CameraOffsetDataOffset, float DefaultCamOffset, float4x4 LocalToWorld)
{
	float3 WorldPosition = SimToWorldPos(ParticlePosition, LocalToWorld);
	float Offset = SafeGetFloat(CameraOffsetDataOffset, InstanceId, DefaultCamOffset);
	float3 CameraVector = WorldToSimVec(normalize(CamWorldPos - WorldPosition), LocalToWorld);

	return CameraVector * Offset;
}

void GetParticleSRT(out float3 Scale, out float3x3 Rotation, out float3 Translation, in uint InstanceId, in int ScaleDataOffset, float3 DefaultScale,
	in int RotationDataOffset, in float4 DefaultRotation, in int PositionDataOffset, in float3 DefaultPos, in int CamOffsetDataOffset, in float DefaultCamOffset,
	in float4 VelocityDirMag, in float3 CamViewPos, in float3 CamViewForward, in float3 CamViewUp, in float4x4 LocalToWorld)
{
	float3 ParticlePosition = SafeGetVec3(PositionDataOffset, InstanceId, DefaultPos);
	float4 ParticleRotation = SafeGetVec4(RotationDataOffset, InstanceId, DefaultRotation);
	float3 ParticleScale = SafeGetVec3(ScaleDataOffset, InstanceId, DefaultScale);

	////////////////////////////////////////////////////////////////////////////////
	// Scale
	Scale = ParticleScale * NiagaraMeshVF.MeshScale;
	
	////////////////////////////////////////////////////////////////////////////////
	// Rotation
	Rotation = NiagaraQuatTo3x3(normalize(ParticleRotation));
	if (NiagaraMeshVF.FacingMode != MESH_FACING_DEFAULT)
	{
		// Factor in facing rotation
		float3x3 FacingMat = GetFacingMatrix(ParticlePosition, VelocityDirMag, LocalToWorld, CamViewPos, CamViewForward, CamViewUp);
		Rotation = mul(Rotation, FacingMat);
	}
	
	////////////////////////////////////////////////////////////////////////////////
	// Translation
	Translation = ParticlePosition;

	// Apply CameraOffset and WS Pivot offset
	Translation += CalculateCameraOffset(Translation, CamViewPos, InstanceId, CamOffsetDataOffset, DefaultCamOffset, LocalToWorld);
	if (!NiagaraMeshVF.bPivotOffsetIsWorldSpace)
	{
		Translation += mul(NiagaraMeshVF.PivotOffset * ParticleScale, Rotation);
	}
}

void CalculateTransforms(inout FVertexFactoryIntermediates Intermediates)
{
	int InstanceId = Intermediates.SortedInstanceId;

	float3 Scale;	
	float3x3 Rotation;
	float3 Translation;
	GetParticleSRT(Scale, Rotation, Translation, InstanceId, NiagaraMeshVF.ScaleDataOffset, NiagaraMeshVF.DefaultScale,
		NiagaraMeshVF.RotationDataOffset, NiagaraMeshVF.DefaultRotation, NiagaraMeshVF.PositionDataOffset, NiagaraMeshVF.DefaultPos.xyz,
		NiagaraMeshVF.CameraOffsetDataOffset, NiagaraMeshVF.DefaultCamOffset, Intermediates.ParticleVelocity, ResolvedView.WorldCameraOrigin.xyz,
		ResolvedView.ViewForward, ResolvedView.ViewUp, Primitive.LocalToWorld);

	////////////////////////////////////////////////////////////////////////////////
	// Compose Transforms
	Intermediates.ParticleToWorld = NiagaraComposeTransformMatrix(Scale, Rotation, Translation);
	Intermediates.ParticleToWorldNoScale = NiagaraComposeTransformMatrix((float3)1.0f, Rotation, Translation);
	Intermediates.WorldToParticle = NiagaraComposeInvTransformMatrix(Scale, Rotation, Translation);	
	
#if ENABLE_PRECISE_MOTION_VECTORS
	// Run through the whole process of generating the components of the transform with previous frame data
	float4 PrevVelocity = GetVelocityDirMag(NiagaraMeshVF.PrevVelocityDataOffset, NiagaraMeshVF.DefaultPrevVelocity, InstanceId);
	float4x4 PrevViewToWorld = ResolvedView.PrevViewToTranslatedWorld;
	float3 PrevScale;
	float3x3 PrevRotation;
	float3 PrevTranslation;
	GetParticleSRT(PrevScale, PrevRotation, PrevTranslation, InstanceId, NiagaraMeshVF.PrevScaleDataOffset, NiagaraMeshVF.DefaultPrevScale,
		NiagaraMeshVF.PrevRotationDataOffset, NiagaraMeshVF.DefaultPrevRotation, NiagaraMeshVF.PrevPositionDataOffset, NiagaraMeshVF.DefaultPrevPos.xyz,
		NiagaraMeshVF.PrevCameraOffsetDataOffset, NiagaraMeshVF.DefaultPrevCamOffset, PrevVelocity, ResolvedView.PrevWorldCameraOrigin.xyz,
		PrevViewToWorld[2].xyz, PrevViewToWorld[1].xyz, Primitive.PreviousLocalToWorld);
		
	Intermediates.PrevParticleToWorld = NiagaraComposeTransformMatrix(PrevScale, PrevRotation, PrevTranslation);
#else
	// Do a cheaper means of calculating the previous matrix that just extrapolates based on velocity
	const float3 ParticleVelocity = Intermediates.ParticleVelocity.xyz * Intermediates.ParticleVelocity.w;
	Intermediates.PrevParticleToWorld = Intermediates.ParticleToWorld;
	Intermediates.PrevParticleToWorld[3].xyz -= ParticleVelocity * NiagaraMeshVF.DeltaSeconds;
#endif
	
	// Handle local space by multiplying in the primitive transforms. TODO: Optimize behind define.
	if (NiagaraMeshVF.bLocalSpace)
	{
		Intermediates.PrevParticleToWorld = mul(Intermediates.PrevParticleToWorld, Primitive.PreviousLocalToWorld);
		Intermediates.ParticleToWorld = mul(Intermediates.ParticleToWorld, Primitive.LocalToWorld);
		Intermediates.WorldToParticle = mul(Primitive.WorldToLocal, Intermediates.WorldToParticle);

		Intermediates.ParticleToWorldNoScale = mul(Intermediates.ParticleToWorldNoScale, Primitive.LocalToWorld);
		float3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
		Intermediates.ParticleToWorldNoScale[0].xyz *= InvScale.x;
		Intermediates.ParticleToWorldNoScale[1].xyz *= InvScale.y;
		Intermediates.ParticleToWorldNoScale[2].xyz *= InvScale.z;
	}

	// If the pivot offset is in world space, apply it here to both the current and previous transforms
	if (NiagaraMeshVF.bPivotOffsetIsWorldSpace)
	{
		Intermediates.ParticleToWorld[3].xyz += NiagaraMeshVF.PivotOffset;
		Intermediates.PrevParticleToWorld[3].xyz += NiagaraMeshVF.PivotOffset;

		float4x4 OffsetMtx = float4x4(
			float4(1, 0, 0, 0),
			float4(0, 1, 0, 0),
			float4(0, 0, 1, 0),
			float4(-NiagaraMeshVF.PivotOffset, 1)
		);
		Intermediates.WorldToParticle = mul(OffsetMtx, Intermediates.WorldToParticle);
	}
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates = (FVertexFactoryIntermediates)0;
	Input.InstanceId = GetInstanceId(Input.InstanceId); // NOTE: Handles instanced stereo

	Intermediates.SortedInstanceId = Input.InstanceId;
	if (NiagaraMeshVF.SortedIndicesOffset != 0xFFFFFFFF)
	{
		Intermediates.SortedInstanceId = NiagaraMeshVF.SortedIndices[NiagaraMeshVF.SortedIndicesOffset + Intermediates.SortedInstanceId];
	}

	Intermediates.ParticleColor = SafeGetVec4(NiagaraMeshVF.ColorDataOffset, Intermediates.SortedInstanceId, NiagaraMeshVF.DefaultColor);
	Intermediates.ParticleVelocity = GetVelocityDirMag(NiagaraMeshVF.VelocityDataOffset, NiagaraMeshVF.DefaultVelocity, Intermediates.SortedInstanceId);

#if (DYNAMIC_PARAMETERS_MASK & 1)
	Intermediates.DynamicParameter = SafeGetVec4(NiagaraMeshVF.MaterialParamDataOffset, Intermediates.SortedInstanceId, NiagaraMeshVF.DefaultDynamicMaterialParameter0);
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	Intermediates.DynamicParameter1 = SafeGetVec4(NiagaraMeshVF.MaterialParam1DataOffset, Intermediates.SortedInstanceId, NiagaraMeshVF.DefaultDynamicMaterialParameter1);
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	Intermediates.DynamicParameter2 = SafeGetVec4(NiagaraMeshVF.MaterialParam2DataOffset, Intermediates.SortedInstanceId, NiagaraMeshVF.DefaultDynamicMaterialParameter2);	
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	Intermediates.DynamicParameter3 = SafeGetVec4(NiagaraMeshVF.MaterialParam3DataOffset, Intermediates.SortedInstanceId, NiagaraMeshVF.DefaultDynamicMaterialParameter3);	
#endif

#if NEEDS_PARTICLE_TIME
	Intermediates.RelativeTime = SafeGetFloat(NiagaraMeshVF.NormalizedAgeDataOffset, Intermediates.SortedInstanceId, NiagaraMeshVF.DefaultNormAge);	
#endif

#if NEEDS_PARTICLE_RANDOM
	Intermediates.ParticleRandom = SafeGetFloat(NiagaraMeshVF.MaterialRandomDataOffset, Intermediates.SortedInstanceId, NiagaraMeshVF.DefaultMatRandom);	
#endif

	// Swizzle vertex color.
	Intermediates.VertexColor = Input.VertexColor FCOLOR_COMPONENT_SWIZZLE;

	CalculateTransforms(Intermediates);	

	// Particle position and translated world position.
	Intermediates.ParticlePosition = Intermediates.ParticleToWorld[3].xyz;
	Intermediates.ParticleTranslatedWorldPosition = Intermediates.ParticlePosition.xyz + ResolvedView.PreViewTranslation.xyz;

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	for(int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
	{
		Intermediates.TexCoords[CoordinateIndex] = Input.TexCoords[CoordinateIndex].xy;
	}
#endif

#if USE_PARTICLE_SUBUVS
	// SubUV.
	float SubImageIndex = SafeGetFloat(NiagaraMeshVF.SubImageDataOffset, Intermediates.SortedInstanceId, NiagaraMeshVF.DefaultSubImage);
	float SubImageLerp = frac(SubImageIndex);
	float SubImageA = SubImageIndex - SubImageLerp;
	float SubImageB = SubImageA + 1;
	float SubImageAH = fmod(SubImageA, NiagaraMeshVF.SubImageSize.x);
	float SubImageBH = fmod(SubImageB, NiagaraMeshVF.SubImageSize.x);
	float SubImageAV = floor(SubImageA * NiagaraMeshVF.SubImageSize.z);
	float SubImageBV = floor(SubImageB * NiagaraMeshVF.SubImageSize.z);
	Intermediates.SubUVCoords.xy = (float2(SubImageAH, SubImageAV) + Input.TexCoords[0].xy) * NiagaraMeshVF.SubImageSize.zw;
	Intermediates.SubUVCoords.zw = (float2(SubImageBH, SubImageBV) + Input.TexCoords[0].xy) * NiagaraMeshVF.SubImageSize.zw;
	Intermediates.SubUVLerp = (NiagaraMeshVF.SubImageBlendMode == 1) ? SubImageLerp : 0.0f;
#endif

	return Intermediates;
}

/**
* Get the 3x3 tangent basis vectors for this vertex factory
* this vertex factory will calculate the binormal on-the-fly
*
* @param Input - vertex input stream structure
* @return 3x3 matrix
*/
float3x3 VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	float3x3 Result=0;
	float3 TangentX = TangentBias(Input.TangentX);
	float4 TangentZ = TangentBias(Input.TangentZ);

	// pass-thru the tangent
	Result[0] = TangentX;
	// pass-thru the normal
	Result[2] = TangentZ.xyz;


	// derive the binormal by getting the cross product of the normal and tangent
	Result[1] = cross(Result[2], Result[0]) * TangentZ.w;
	// Recalculate TangentX off of the other two vectors
	// This corrects quantization error since TangentX was passed in as a quantized vertex input
	// The error shows up most in specular off of a mesh with a smoothed UV seam (normal is smooth, but tangents vary across the seam)
	Result[0] = cross(Result[1], Result[2]) * TangentZ.w;

	return Result;
}

// @return translated world position
float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return CalcWorldPosition(Input, Intermediates);
}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.ParticleToWorld[2].xyz;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

void CalcTangentToWorld(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, out float3 TangentToWorld0, out float4 TangentToWorld2)
{
	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, Intermediates);

	// Use the particle's unscaled transform for rotating normals to match static mesh
	float3x3 TransformNoScale = (float3x3)GetParticleTransformNoScale(Intermediates);
	float3x3 TangentToWorld = mul(TangentToLocal, TransformNoScale);

	TangentToWorld0 = normalize(TangentToWorld[0]);
	TangentToWorld2 = float4(normalize(TangentToWorld[2]), TangentBias(Input.TangentZ.w) * Primitive.InvNonUniformScaleAndDeterminantSign.w);
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;

#if USE_PARTICLE_SUBUVS
	Interpolants.SubUV0AndTexCoord0.xy = Intermediates.SubUVCoords.xy;
	Interpolants.SubUV1AndLerp.xy = Intermediates.SubUVCoords.zw;
	Interpolants.SubUV1AndLerp.zw = Intermediates.SubUVLerp.xx;

	#if  NUM_TEX_COORD_INTERPOLATORS
		float2 CustomizedUVs[ NUM_TEX_COORD_INTERPOLATORS];
		GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
		Interpolants.SubUV0AndTexCoord0.zw = CustomizedUVs[0];
	#else
		Interpolants.SubUV0AndTexCoord0.zw = 0;
	#endif
#elif  NUM_TEX_COORD_INTERPOLATORS
	// Ensure the unused components of the last packed texture coordinate are initialized.
	Interpolants.TexCoords[( NUM_TEX_COORD_INTERPOLATORS + 1) / 2 - 1] = 0;

	float2 CustomizedUVs[ NUM_TEX_COORD_INTERPOLATORS];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);

	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex * 2 + 1 < NUM_TEX_COORD_INTERPOLATORS; ++CoordinateIndex)
	{
		Interpolants.TexCoords[CoordinateIndex].xy = CustomizedUVs[CoordinateIndex * 2];
		Interpolants.TexCoords[CoordinateIndex].wz = CustomizedUVs[CoordinateIndex * 2 + 1];
	}
	#if NUM_TEX_COORD_INTERPOLATORS & 1
		Interpolants.TexCoords[NUM_TEX_COORD_INTERPOLATORS / 2].xy = CustomizedUVs[NUM_TEX_COORD_INTERPOLATORS - 1];
	#endif // #if NUM_TEX_COORD_INTERPOLATORS & 1
#endif


	Interpolants.TangentToWorld0.w = 0;
	CalcTangentToWorld(Input, Intermediates, Interpolants.TangentToWorld0.xyz, Interpolants.TangentToWorld2);
#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
	Interpolants.TangentToWorld2_Center = Interpolants.TangentToWorld2;
#endif

#if INTERPOLATE_VERTEX_COLOR
	Interpolants.VertexColor = Intermediates.VertexColor;
#endif

#if NEEDS_PARTICLE_COLOR
	Interpolants.ParticleColor = Intermediates.ParticleColor;
#endif

#if (DYNAMIC_PARAMETERS_MASK & 1)
	Interpolants.DynamicParameter = Intermediates.DynamicParameter;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	Interpolants.DynamicParameter1 = Intermediates.DynamicParameter1;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	Interpolants.DynamicParameter2 = Intermediates.DynamicParameter2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	Interpolants.DynamicParameter3 = Intermediates.DynamicParameter3;
#endif


#if USE_PARTICLE_POSITION
	Interpolants.ParticleTranslatedWorldPosition = Intermediates.ParticleTranslatedWorldPosition;
#endif

#if USE_PARTICLE_VELOCITY
	Interpolants.ParticleVelocity = Intermediates.ParticleVelocity;
#endif

#if USE_PARTICLE_TIME
	Interpolants.RelativeTime = Intermediates.RelativeTime;
#endif

#if USE_PARTICLE_RANDOM
	Interpolants.ParticleRandom = Intermediates.ParticleRandom;
#endif

#if USE_PARTICLE_LOCAL_TO_WORLD
	float4x4 ParticleToWorldT = transpose(Intermediates.ParticleToWorld);
	Interpolants.ParticleToWorld[0] = ParticleToWorldT[0];
	Interpolants.ParticleToWorld[1] = ParticleToWorldT[1];
	Interpolants.ParticleToWorld[2] = ParticleToWorldT[2];
#endif

#if USE_PARTICLE_WORLD_TO_LOCAL
	float4x4 WorldToParticleT = transpose(Intermediates.WorldToParticle);
	Interpolants.WorldToParticle[0] = WorldToParticleT[0];
	Interpolants.WorldToParticle[1] = WorldToParticleT[1];
	Interpolants.WorldToParticle[2] = WorldToParticleT[2];
#endif

#if INSTANCED_STEREO
	Interpolants.EyeIndex = 0;
#endif

	return Interpolants;
}

// @return previous translated world position
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return CalcPrevWorldPosition(Input, Intermediates);
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
    return 0;
}

float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return float4(0,0,0,0);
}

#if USING_TESSELLATION || RAYHITGROUPSHADER
	struct FVertexFactoryInterpolantsVSToDS
	{
		FVertexFactoryInterpolantsVSToPS InterpolantsVSToPS;
	};

	float2 VertexFactoryGetTextureCoordinateDS( FVertexFactoryInterpolantsVSToDS Interpolants )
	{
	#if NUM_MATERIAL_TEXCOORDS
		return Interpolants.InterpolantsVSToPS.TexCoords[0].xy;
	#else // #if NUM_MATERIAL_TEXCOORDS
		return float2(0,0);
	#endif // #if NUM_MATERIAL_TEXCOORDS
	}

	FVertexFactoryInterpolantsVSToPS VertexFactoryAssignInterpolants(FVertexFactoryInterpolantsVSToDS Input)
	{
		return Input.InterpolantsVSToPS;
	}

	/** Converts from vertex factory specific interpolants to a FMaterialTessellationParameters, which is used by material inputs. */
	FMaterialTessellationParameters GetMaterialTessellationParameters(FVertexFactoryInterpolantsVSToDS Interpolants, float3 CameraLocalWorldPosition)
	{
		FMaterialTessellationParameters	Result;
		#if NUM_TEX_COORD_INTERPOLATORS
			UNROLL
			for (int CoordinateIndex = 0; CoordinateIndex * 2 + 1 < NUM_TEX_COORD_INTERPOLATORS; ++CoordinateIndex)
			{
				Result.TexCoords[CoordinateIndex * 2] = Interpolants.InterpolantsVSToPS.TexCoords[CoordinateIndex].xy;
				Result.TexCoords[CoordinateIndex * 2 + 1] = Interpolants.InterpolantsVSToPS.TexCoords[CoordinateIndex].wz;
			}
			#if NUM_TEX_COORD_INTERPOLATORS & 1
				Result.TexCoords[NUM_TEX_COORD_INTERPOLATORS - 1] = Interpolants.InterpolantsVSToPS.TexCoords[NUM_TEX_COORD_INTERPOLATORS / 2].xy;
			#endif // #if NUM_TEX_COORD_INTERPOLATORS & 1
		#endif

		Result.VertexColor = float4(1,1,1,1);

		half3 TangentToWorld0 = Interpolants.InterpolantsVSToPS.TangentToWorld0.xyz;
		half4 TangentToWorld2 = Interpolants.InterpolantsVSToPS.TangentToWorld2;
		Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
		Result.TangentToWorldPreScale = 1;
		Result.WorldPosition = CameraLocalWorldPosition + ResolvedView.WorldCameraOrigin;

		return Result;
	}

	FVertexFactoryInterpolantsVSToDS VertexFactoryGetInterpolantsVSToDS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
	{
		FVertexFactoryInterpolantsVSToDS Interpolants;
		Interpolants.InterpolantsVSToPS = VertexFactoryGetInterpolantsVSToPS(Input, Intermediates, VertexParameters);
		return Interpolants;
	}

	FVertexFactoryInterpolantsVSToDS VertexFactoryInterpolate(FVertexFactoryInterpolantsVSToDS a, float aInterp, FVertexFactoryInterpolantsVSToDS b, float bInterp)
	{
		FVertexFactoryInterpolantsVSToDS O;

		// Do we really need to interpolate TangentToWorld2 here? It should be replaced by the
		// interpolated normal from 'whatever' interpolation scheme we're using

		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TangentToWorld0.xyz);
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TangentToWorld2);
#if INTERPOLATE_VERTEX_COLOR
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.VertexColor);
#endif

#if NEEDS_PARTICLE_COLOR
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.ParticleColor);
#endif

#if  NUM_TEX_COORD_INTERPOLATORS
		for (int i = 0; i < ( NUM_TEX_COORD_INTERPOLATORS + 1) / 2; ++i)
		{
			TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TexCoords[i]);
		}
#endif

#if (DYNAMIC_PARAMETERS_MASK & 1)
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.DynamicParameter);
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.DynamicParameter1);
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.DynamicParameter2);
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.DynamicParameter3);
#endif

#if USE_PARTICLE_LOCAL_TO_WORLD
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.ParticleToWorld[0]);
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.ParticleToWorld[1]);
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.ParticleToWorld[2]);
#endif

#if USE_PARTICLE_WORLD_TO_LOCAL
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.WorldToParticle[0]);
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.WorldToParticle[1]);
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.WorldToParticle[2]);
#endif

		return O;
	}

	float3x3 VertexFactoryGetTangentToLocalDS(FVertexFactoryInterpolantsVSToDS Interpolants)
	{
		// This duplicates stuff already going on in GetMaterialTessellationParameters(), so
		// maybe the hull shader could leverage that instead?
		half3 TangentToWorld0 = Interpolants.InterpolantsVSToPS.TangentToWorld0.xyz;
		half4 TangentToWorld2 = Interpolants.InterpolantsVSToPS.TangentToWorld2;
		float3x3 TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );

		return TangentToWorld;
	}
#endif // #if USING_TESSELLATION || RAYHITGROUPSHADER


// RHI_RAYTRACING
#if RAYHITGROUPSHADER
	FVertexFactoryInput LoadVertexFactoryInputForHGS(uint TriangleIndex, int VertexIndex)
	{
		FVertexFactoryInput Input;

		FTriangleBaseAttributes Tri = LoadTriangleBaseAttributes(TriangleIndex);
		uint VertexId = Tri.Indices[VertexIndex];
		
		Input.InstanceId = InstanceIndex() - GetBaseInstanceIndex();

		// Fill FVertexFactoryInput with dummy values, the real ones will be fetched later from NiagaraMeshVF using InstanceId  
		Input.Position = float4(Tri.LocalPositions[VertexIndex], 1.0f);
		Input.TangentX = 1.0;
		Input.TangentZ = 0.0;
		Input.VertexColor = float4(1.0, 1.0, 1.0, 0.5);
#if NUM_MATERIAL_TEXCOORDS_VERTEX
		UNROLL
		for (int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
		{
			Input.TexCoords[CoordinateIndex].x = 0.5f;
			Input.TexCoords[CoordinateIndex].y = 0.5f;
		}
#elif USE_PARTICLE_SUBUVS
		Input.TexCoords[0].x = 0.5f;
		Input.TexCoords[0].y = 0.5f;
#endif

#if PASS_NEEDS_VERTEX_ID
		Input.VertexId = VertexId;
#endif // #if PASS_NEEDS_VERTEX_ID

		return Input;
	} 
#endif // #if COMPUTESHADER || RAYHITGROUPSHADER
